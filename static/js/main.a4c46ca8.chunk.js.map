{"version":3,"sources":["components/FriendCard/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","occupation","location","onClick","removeFriend","id","App","state","employees","filter","friend","setState","searchTerm","event","console","log","target","value","filteredEmployees","includes","type","onChange","this","map","key","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2tBA6BeA,MA1Bf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,SAEnC,yBAAKJ,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMG,MAEhC,4BACE,+CADF,IACgCH,EAAMM,YAEtC,4BACE,6CADF,IAC8BN,EAAMO,YAIxC,0BAAMC,QAAS,kBAAMR,EAAMS,aAAaT,EAAMU,KAAKT,UAAU,UAA7D,kBC4CSU,E,4MA3DbC,MAAQ,CACNC,a,EAGFJ,aAAe,SAAAC,GAEb,IAAMG,EAAY,EAAKD,MAAMC,UAAUC,QAAO,SAAAC,GAAM,OAAIA,EAAOL,KAAOA,KAEtE,EAAKM,SAAS,CAAEH,e,EAElBI,WAAa,SAAAC,GAEX,GADAC,QAAQC,IAAIF,EAAMG,OAAOC,OACC,KAAvBJ,EAAMG,OAAOC,OAAuC,MAAvBJ,EAAMG,OAAOC,MAE3C,EAAKN,SAAS,CAACH,kBACV,CAEL,IAAMU,EAAoB,EAAKX,MAAMC,UAAUC,QAAO,SAAAD,GAAS,OAAIA,EAAUP,WAAWkB,SAASN,EAAMG,OAAOC,UAC9G,EAAKN,SAAS,CAACH,UAAWU,M,uDAIpB,IAAD,OACP,OACE,6BACA,mGACA,2BAAOE,KAAM,OAAOC,SAAWC,KAAKV,aACpC,2BACGU,KAAKf,MAAMC,UAAUe,KAAI,SAAAf,GAAS,OACnC,kBAAC,EAAD,CACEJ,aAAc,EAAKA,aACnBC,GAAIG,EAAUH,GACdmB,IAAKhB,EAAUH,GACfP,KAAMU,EAAUV,KAChBE,MAAOQ,EAAUR,MACjBC,WAAYO,EAAUP,WACtBC,SAAUM,EAAUN,oB,GAtCZuB,aCOEC,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.a4c46ca8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.location}\n          </li>\n        </ul>\n      </div>\n      <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n        ùòÖ\n      </span>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport employees from './employeeInfo.json';\nimport FriendCard from './components/FriendCard';\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    employees\n  };\n\n  removeFriend = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const employees = this.state.employees.filter(friend => friend.id !== id);\n    // Set this.state.friends equal to the new friends array\n    this.setState({ employees });\n  };\n  searchTerm = event => {\n    console.log(event.target.value);\n    if(event.target.value === \"\" || event.target.value === \" \"){\n     // console.log(\"something\");\n      this.setState({employees})\n    } else {\n      //console.log(\"somethingeEsse\");\n      const filteredEmployees = this.state.employees.filter(employees => employees.occupation.includes(event.target.value));\n      this.setState({employees: filteredEmployees});\n    }\n  }\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n      <p>Below, you can search for an employee according to their occupation!</p>\n      <input type= \"text\" onChange= {this.searchTerm} />\n      <p>\n        {this.state.employees.map(employees => (\n        <FriendCard\n          removeFriend={this.removeFriend}\n          id={employees.id}\n          key={employees.id}\n          name={employees.name}\n          image={employees.image}\n          occupation={employees.occupation}\n          location={employees.location}\n        />\n      ))}\n      </p>\n      </div>\n      //  <Wrapper>\n      //    <Title>employeess List</Title>\n      //   {this.state.employeess.map(friend => (\n      //     <FriendCard\n      //       removeFriend={this.removeFriend}\n      //       id={friend.id}\n      //       key={friend.id}\n      //       name={friend.name}\n      //       image={friend.image}\n      //       occupation={friend.occupation}\n      //       location={friend.location}\n      //     />\n      //   ))}\n      // </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}